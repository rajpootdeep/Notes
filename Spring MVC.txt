Spring MVC

*Used to develop web application, it  follows Model-View Controller design pattern
*Dispatcher servlet (Front controller, i.e. responsible to manage flow of spring MVC applicaton) is a class that receives the incoming request and maps to controller maodel views.
* Dispatcher servlet dispatches request to handlers

#Steps to create simple Spring MVC applioaction -:

1. Pom.xml - for dependency
2. Request page i.e. JSP or etc
3. Controller class
4. web.xml - entry of controller, it contains Dispatcher servlet (In java based configuration we create WebInitializer.java in place of web.xml and MVCconfig.java is used in place of dispatcher servlet).
5. spring-servlet.xml - define bean and other configurations

* ViewResolver enables to render models in browser.

Annotations :

@RequestParam - to extract (input data may be passed as a) query parameter or form parameter and even files from request.
@RequestParam(name="id") [(value="id"), ("id")] String foodId

#optional request parameters
@RequestParam(required=false) String id - when parameter is not specified , the method parameter is bound to null.
we can also use  Optional<T> like PathVariable in rest api. [ id.orElseGet(() -> "not provided" ].

#default value to RequestParameter
@RequestParameter(defaultValue="test" String id)
#Mapping all parameters without defining their names or count by just using Map.
@RequestParam Map<String,String> allParams
#Mapping Multivalue parameter
@RequestParam List<String> id

Ex. 
@RequestParam(name="name", required=false, defaultValue="world").


@RequestMapping - used to map HTTP request to handler methods of MVC and REST controllers. (We can also use at class level)


@ModelAttribute() - Binds a method parameter or method return value to a named model atrribute and then expose it to a web view.

@Component - it is a class level annotation, used to denote class as component.
@Service - It is used to mark the classes as service provider, used at class level only.
@Component - to indicate that class provide the machanism for storage, retrieval, udate, delete, and  search operations on object, to marks the bean as spring managed components.

@Controller - mark class as controller/web request handler
@Service - it indicate, the class holding the business logic

# Valiadtion annotation (Hibernate Validator)
1. @Min(value=18, message="Must be greater than 18")
2. @Max(value=25, message="Must be lass than 25")
3. @NotNull(message="")  - not null, can be empty
4. @NotBlank(message="") - String is not null and trimmed length is >0
5. @NotEmpty(message="") - not null and size >0
6. @Email(message="") - valid email address
7. @Pattern(regexp="^[a-zA-Z]{6,10}$")
8. @AssertTrue - element should be true
9. @AssertFalse - element should be false
10. @NegativeOrZero
11. @Null
12. @Negative
13. @Positive
14. @PositiveOrZero
15. @Size(min=10, max=200, message="")

* Model Interface - provide spring to work with data, tranfer data between view and controller, acts as data container, supply attributes used for rendering views.
* ModelMap - It also used to pass values to render a view., it gives the ability to pass a collection of values.
* ModelAndView - Return both model and view in single return value.


* @SpringBootApplication - used to mark the main class of Spring Boot Appliaction, it encapsulates  @Configuration, @EnableAutoConfiguration and @ComponentScan annotations with thier default attributes.

@Configuration - tags the class as source of bean definations for the application context
@EnableAutoConfiguration - it's name suggest , means Spring Boot looks for auto configuration beans on it's classpath and automatically applies on them.

 
* @ControllerAdvice - To handle exception at global level 
